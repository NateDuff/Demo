trigger:
- main
- development
- feature*

pool:
  vmImage: ubuntu-20.04

variables:
  - group: SharePointReleaseNotes
  - name: major
    value: 1
  - name: minor
    value: 1

stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: buildApp
        displayName: Build Application
        dependsOn: []
        steps:
          - powershell: |
              Write-Host "Build application build step"
              Get-ChildItem Env:
            displayName: Run Build Application Script

          - powershell: |
              node -v
              sudo npm i -g @pnp/cli-microsoft365@next
              m365 login --authType certificate --certificateBase64Encoded "$(PipelineCert)" --appId $(appId) --tenant $(tenantId)
              
              $siteUrl = "https://nateduff.sharepoint.com/sites/PipelineProvisioning"
              $markdownPath = "$(System.DefaultWorkingDirectory)/pull_request_template.md"
              $pagesPath = "/sites/PipelineProvisioning/SitePages"

              $fileName = "Sample-Markdown-from-ADO.aspx"

              # Make sure we have pip updated for the 'markdown' package
              python -m pip install --upgrade pip
              python -m pip install markdown

              # Convert the Markdown to HTML, for the web part properties to work correctly
              $md = Get-Content $markdownPath
              $md = $md -join "\n"
              $htmlFromMd = python -m markdown $markdownPath
              $htmlFromMd = $htmlFromMd -join ''

              # Set the web part data from the html and md. The data needs both to publish correctly
              $webPartData = '{""title"": ""ADO-Markdown"",""description"": ""Auto-generated from ADO pipeline"",""serverProcessedContent"": {""htmlStrings"": {""html"": ""' + $htmlFromMd + '""},""searchablePlainTexts"": {""code"": ""' + $md + '""},""imageSources"": {},""links"": {}},""dataVersion"": ""2.0"",""properties"": {""displayPreview"": true,""lineWrapping"": true,""miniMap"": {""enabled"": false},""previewState"": ""Show"",""theme"": ""Monokai""}}'
              
              # Find the first existing markdown webpart on the page
              $pageControlId = m365 spo page control list --webUrl $siteUrl --name $fileName --query "[?title=='ADO-Markdown'] | [0].id" -o json
              
              if ($pageControlId -eq 'null') {
                m365 spo page clientsidewebpart add -u $siteUrl -n $fileName --webPartId 1ef5ed11-ce7b-44be-bc5e-4abd55101d16 --webPartData $webPartData
              }
              else {
                # Add the webpart to an existing page, and existing web part, if found
                m365 spo page control set -i $pageControlId -u $siteUrl -n $fileName --webPartData $webPartData
              }

              # Publish the page
              m365 spo file checkin --fileUrl $pagesPath/$fileName --webUrl $siteUrl
               
              m365 logout
            displayName: Publish Release Notes to SharePoint
          
      - job: testApp
        displayName: Run Puppeeteer Tests
        dependsOn: [buildApp]
        steps:
          - powershell: |
              npm i
              npm i -d
            displayName: Install NPM Modules
            workingDirectory: App
          
          - powershell: |
              mkdir ../screenshots

              npm run test:integration

              Move-Item -Path ../screenshots -Destination $(Build.ArtifactStagingDirectory) -Force -Verbose
            displayName: Run Puppeteer Tests
            workingDirectory: App

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: true
          
          ## Cobertura Code Coverage broken in Jest tests agains CRA (Experimental JSX Error)
          # - task: PublishCodeCoverageResults@1
          #   displayName: 'Publish code coverage from Jest tests'
          #   inputs:
          #     codeCoverageTool: Cobertura
          #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/App/integration/coverage/cobertura-coverage.xml'
          #     reportDirectory: '$(System.DefaultWorkingDirectory)/App/integration/coverage'
          #     failIfCoverageEmpty: true
          
          - publish: $(Build.ArtifactStagingDirectory)
            displayName: Publish Passing Test Screenshots
            condition: succeeded()
            artifact: images

          - publish: $(System.DefaultWorkingDirectory)
            displayName: Publish Working Directory for Debugging
            condition: failed()
            artifact: drop

  - ${{ if and(eq(variables['Build.SourceBranchName'], 'development'), eq(variables['Build.Reason'], 'IndividualCI')) }}:
    - stage: developmentPromotion
      displayName: Development Promotion
      jobs:
        - job: mainPromotion
          displayName: Main Branch Promotion
          steps:
            - checkout: self
              persistCredentials: true

            - powershell: |
                git checkout development
                git -c http.extraHeader="Authorization: Basic $env:Token" push origin HEAD:main
              displayName: Run Main Branch Promo Script
              env:
                Token: $(System.AccessToken)
                
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    - stage: gitHubPromotion
      displayName: GitHub Promotion
      jobs:
        - job: externalPromotion
          displayName: GitHub Release Promotion
          variables:
            patch: $[counter(variables['Build.SourceBranchName'], 0)]
          steps:
            - checkout: self

            - powershell: | 
                Write-Host "Stage promo"

                git checkout $(Build.SourceBranchName)

                git clone --mirror https://$env:SYSTEM_ACCESSTOKEN@dev.azure.com/NateDuff/Duff%20Blog/_git/Demo .

                git remote add GHorigin https://github.com/NateDuff/Demo.git

                git push --all https://$(GHPAT)@github.com/NateDuff/Demo.git
              displayName: Run Promotion Script
              env:
                SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            
            - powershell: |
                Write-Host "##vso[build.updatebuildnumber]v$(major).$(minor).$(patch)"
                
                Write-Host "##vso[build.addbuildtag]v$(major).$(minor).$(patch)"
              displayName: Run Update Build Number Script

            - powershell: |
                Write-Host "Create Release Notes markdown"
                
                $releaseNotesPath = "$(Build.ArtifactStagingDirectory)/releaseNotes.md"

                $content = "# Application Release Notes 
                "
                $content = $content += "Documented code updates for this release version can be found under either the Enhancement or Fixes lists below. 
                "

                $enhancements = $null #@(@{'id' = 28; 'title' = 'User Story 1'}, @{'id' = 29; 'title' = 'User Story 2'})
                $fixes = $null #@(@{'id' = 30; 'title' = 'Bug 1'}, @{'id' = 31; 'title' = 'Bug 2'})

                ## User Stories
                $content = $content += "## Enhancements: 
                "

                if ($enhancements) {
                foreach ($enhancement in $enhancements) {
                $content = $content += "* [#$($enhancement.id):](https://dev.azure.com/NateDuff/Terraform/_workitems/edit/$($enhancement.id)) $($enhancement.title) 
                "
                }
                } else {
                $content = $content += "* None 
                "
                }

                ## Bugs
                $content = $content += "## Fixes: 
                "

                if ($fixes) {
                foreach ($fix in $fixes) {
                $content = $content += "* [#$($fix.id):](https://dev.azure.com/NateDuff/Terraform/_workitems/edit/$($fix.id)) $($fix.title) 
                "
                }
                } else {
                $content = $content += "* None
                "
                }

                New-Item -Path $releaseNotesPath -ItemType File -Value $content -Verbose -Force

                Write-Host "##vso[build.uploadlog]$(Build.ArtifactStagingDirectory)/releaseNotes.md"
              displayName: Run Update Release Notes Script
            
            - task: GitHubRelease@1  
              displayName: Create GitHub Release  
              inputs:  
                gitHubConnection: MyGitHubServiceConnection  
                repositoryName: 'NateDuff/Demo'
                action: 'create'
                tagSource: userSpecifiedTag  
                tag: '$(Build.BuildNumber)'
                title: '$(Build.BuildNumber)'  
                releaseNotesFilePath: '$(Build.ArtifactStagingDirectory)/releaseNotes.md'
                assets: '**/*.md'  
                addChangeLog: false
                ${{ if eq(variables.major, 0) }}:
                  isPreRelease: true
            
            - powershell: |
                node -v
                sudo npm i -g @pnp/cli-microsoft365@next
                m365 login --authType certificate --certificateBase64Encoded "$(PipelineCert)" --appId $(appId) --tenant $(tenantId)
                
                $siteUrl = "https://nateduff.sharepoint.com/sites/PipelineProvisioning"
                $markdownPath = "$(Build.ArtifactStagingDirectory)/releaseNotes.md"
                $pagesPath = "/sites/PipelineProvisioning/SitePages"

                $fileName = "Sample-Markdown-from-ADO.aspx"

                # Make sure we have pip updated for the 'markdown' package
                python -m pip install --upgrade pip
                python -m pip install markdown

                # Convert the Markdown to HTML, for the web part properties to work correctly
                $md = Get-Content $markdownPath
                $md = $md -join "\n"
                $htmlFromMd = python -m markdown $markdownPath
                $htmlFromMd = $htmlFromMd -join ''

                # Set the web part data from the html and md. The data needs both to publish correctly
                $webPartData = '{""title"": ""ADO-Markdown"",""description"": ""Auto-generated from ADO pipeline"",""serverProcessedContent"": {""htmlStrings"": {""html"": ""' + $htmlFromMd + '""},""searchablePlainTexts"": {""code"": ""' + $md + '""},""imageSources"": {},""links"": {}},""dataVersion"": ""2.0"",""properties"": {""displayPreview"": true,""lineWrapping"": true,""miniMap"": {""enabled"": false},""previewState"": ""Show"",""theme"": ""Monokai""}}'
                
                # Find the first existing markdown webpart on the page
                $pageControlId = m365 spo page control list --webUrl $siteUrl --name $fileName --query "[?title=='ADO-Markdown'] | [0].id" -o json
                
                if ($pageControlId -eq 'null') {
                  m365 spo page clientsidewebpart add -u $siteUrl -n $fileName --webPartId 1ef5ed11-ce7b-44be-bc5e-4abd55101d16 --webPartData $webPartData
                }
                else {
                  # Add the webpart to an existing page, and existing web part, if found
                  m365 spo page control set -i $pageControlId -u $siteUrl -n $fileName --webPartData $webPartData
                }

                # Publish the page
                m365 spo file checkin --fileUrl $pagesPath/$fileName --webUrl $siteUrl
                
                m365 logout
              displayName: Publish Release Notes to SharePoint
