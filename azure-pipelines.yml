trigger:
- main
- development
- feature*

pool:
  vmImage: ubuntu-20.04

variables:
  major: 1
  minor: 1

stages:
  - stage: Build
    jobs:
      - job: buildApp
        displayName: Build Application
        steps:
          - powershell: |
              Write-Host "Build application build step"
              Get-ChildItem Env:
            displayName: Run Build Application Script
      - job: testApp
        displayName: Run Puppeeteer Tests
        steps:
          - powershell: |
              npm i
              npm i -d
            displayName: Install NPM Modules
            workingDirectory: App
          
          - powershell: |
              mkdir ../screenshots

              npm run test:integration

              Move-Item -Path ../screenshots -Destination $(Build.ArtifactStagingDirectory) -Force -Verbose
            displayName: Run Puppeteer Tests
            workingDirectory: App

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: true
          
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage from Jest tests'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
              failIfCoverageEmpty: true
          
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: images
              publishLocation: Container

  - ${{ if and(eq(variables['Build.SourceBranchName'], 'development'), eq(variables['Build.Reason'], 'IndividualCI')) }}:
    - stage: developmentPromotion
      displayName: Development Promotion
      jobs:
        - job: mainPromotion
          displayName: Main Branch Promotion
          steps:
            - checkout: self
              persistCredentials: true

            - powershell: |
                git checkout development
                git -c http.extraHeader="Authorization: Basic $env:Token" push origin HEAD:main
              displayName: Run Main Branch Promo Script
              env:
                Token: $(System.AccessToken)
                
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    - stage: gitHubPromotion
      displayName: GitHub Promotion
      jobs:
        - job: externalPromotion
          displayName: GitHub Release Promotion
          variables:
            patch: $[counter(variables['Build.SourceBranchName'], 0)]
          steps:
            - checkout: self

            - powershell: | 
                Write-Host "Stage promo"

                git checkout $(Build.SourceBranchName)

                git clone --mirror https://$env:SYSTEM_ACCESSTOKEN@dev.azure.com/NateDuff/Duff%20Blog/_git/Demo .

                git remote add GHorigin https://github.com/NateDuff/Demo.git

                git push --all https://$(GHPAT)@github.com/NateDuff/Demo.git
              displayName: Run Promotion Script
              env:
                SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            
            - powershell: |
                Write-Host "##vso[build.updatebuildnumber]v$(major).$(minor).$(patch)"
                
                Write-Host "##vso[build.addbuildtag]v$(major).$(minor).$(patch)"
              displayName: Run Update Build Number Script

            - powershell: |
                Write-Host "Create Release Notes markdown"
                
                $releaseNotesPath = "$(Build.ArtifactStagingDirectory)/releaseNotes.md"

                $content = "# Application Release Notes 
                "
                $content = $content += "Documented code updates for this release version can be found under either the Enhancement or Fixes lists below. 
                "

                $enhancements = $null #@(@{'id' = 28; 'title' = 'User Story 1'}, @{'id' = 29; 'title' = 'User Story 2'})
                $fixes = $null #@(@{'id' = 30; 'title' = 'Bug 1'}, @{'id' = 31; 'title' = 'Bug 2'})

                ## User Stories
                $content = $content += "## Enhancements: 
                "

                if ($enhancements) {
                foreach ($enhancement in $enhancements) {
                $content = $content += "* [#$($enhancement.id):](https://dev.azure.com/NateDuff/Terraform/_workitems/edit/$($enhancement.id)) $($enhancement.title) 
                "
                }
                } else {
                $content = $content += "* None 
                "
                }

                ## Bugs
                $content = $content += "## Fixes: 
                "

                if ($fixes) {
                foreach ($fix in $fixes) {
                $content = $content += "* [#$($fix.id):](https://dev.azure.com/NateDuff/Terraform/_workitems/edit/$($fix.id)) $($fix.title) 
                "
                }
                } else {
                $content = $content += "* None
                "
                }

                New-Item -Path $releaseNotesPath -ItemType File -Value $content -Verbose -Force

                Write-Host "##vso[build.uploadlog]$(Build.ArtifactStagingDirectory)/releaseNotes.md"
              displayName: Run Update Release Notes Script
            
            - task: GitHubRelease@1  
              displayName: Create GitHub Release  
              inputs:  
                gitHubConnection: MyGitHubServiceConnection  
                repositoryName: 'NateDuff/Demo'
                action: 'create'
                tagSource: userSpecifiedTag  
                tag: '$(Build.BuildNumber)'
                title: '$(Build.BuildNumber)'  
                releaseNotesFilePath: '$(Build.ArtifactStagingDirectory)/releaseNotes.md'
                assets: '**/*.md'  
                addChangeLog: false
                ${{ if eq(variables.major, 0) }}:
                  isPreRelease: true
                